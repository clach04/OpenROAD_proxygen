
<<DOCHISTORY>>
/*-------------------------------------------------------------------------------------------------*/
/* Copyright Luminary Solutions Limited                                                            */
/*-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/
/*                                                                                                 */
/* Template:       : jproxy1.tpl                                                                   */
/*                                                                                                 */
/* Template Name   : OpenROAD Class Proxy Template                                                 */
/*                                                                                                 */
/* System Name     : ProxyGen                                                                      */
/*                                                                                                 */
/* Sub-System Name : Default Java Templates                                                        */
/*                                                                                                 */
/* Author          : Anthony Simpson (Luminary - An Ingres Company)                                */
/*                                                                                                 */
/* Date            : 02/04/2008                                                                    */
/*                                                                                                 */
/* Description     : Used to generate a proxy wrapper for an OpenROAD class.                       */
/*                                                                                                 */
/* Version History                                                                                 */
/*                                                                                                 */
/* Version Date     Who   Description                                                              */
/* ------- -------- ----- -----------                                                              */
/* 1.0     02/04/08 AGS   Original version.                                                        */
/*-------------------------------------------------------------------------------------------------*/
<<DOCHISTORY>>
/**
 * Copyright ${copyright_holder}
 *
 */
package ${lib_name}.${app_name};

import java.util.*;
import com.ca.openroad.*;
import uk.co.luminary.proxygen.util.*;
<<FOREACHAPP>>
import ${lib_name}.${includedapp}.*;
<<FOREACHAPP>>

 /**
 * <!-- ----------------------------------------------------------------------------------------- -->
 * <pre>
 * Description     : Generated by ProxyGen using template file jproxy1.tpl
 * <!--
 * Interface       : ${lib_name}.${app_name}.${class_prefix}${class_name}
 * System Name     : ${aka_name}
 * Sub-System Name : ${app_name}
 *
 * Version History
 *
 * Version  Date        Who     Description
 * -------  ----------- -----   -----------
 * 1.0      ${datenow}  ${username}     Original version.
 * </pre>
 * -->
 * @author ProxyGen (jproxy1.tpl)
 * @version Revision $Revision$ created on $Date$ by $Author$
 *
 * <!-- ----------------------------------------------------------------------------------------- -->
 */
public class ${class_prefix}${class_name} implements OpenROADClass {
<<FOREACHATTR>>
<<ARRAY>>
<<!DV_NULL>>
    public ${class_prefix}${type}[] ${langname} = {};
<<!DV_NULL>>
<<DV_NULL>>
    public ${class_prefix}${type}[] ${langname} = null;
<<DV_NULL>>
<<ARRAY>>
<<CLASS>>
    public ${class_prefix}${type} ${langname} = null;
<<CLASS>>
<<SCALAR>>
<<!DV_NULL>>
<<ONLYIF>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
    public ${type} ${langname} = new ${type}(${default_value});
<<ONLYIF>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<STRING>>
    public ${type} ${langname} = new ${type}("${default_value}");
<<ONLYIF>><<STRING>>
<<ONLYIF>><<DATETIME>>
    public ${type} ${langname} = new ${type}();
<<ONLYIF>><<DATETIME>>
<<ONLYIF>><<BYTEARRAY>>
    public ${type} ${langname} = null;
<<ONLYIF>><<BYTEARRAY>>
<<!DV_NULL>>
<<DV_NULL>>
    public ${type} ${langname} = null;
<<DV_NULL>>
<<SCALAR>>
<<FOREACHATTR>>
    private ASOSession aso = null;

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : ${class_prefix}${class_name}
     * -->
     * <pre>
     * Description : Constructor.
     *
     * @param aso, an ASOSession object to use to connect to the OpenROAD application server.
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public ${class_prefix}${class_name} (ASOSession aso)
    {
        this.aso = aso;
<<CLASS>>
<<!DV_NULL>>
        this.${langname} = new ${class_prefix}${type}(this.aso);
<<!DV_NULL>>
<<CLASS>>
    }

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : declareAttributes
     * -->
     * <pre>
     * Description : Declare the attributes of this class on the given paramater object.
     *
     * @param pdo, the parameter object to declare the attributes on
     * @param name, the name of this class in your OpenROAD application
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void declareAttributes(ParameterData pdo, String name) throws COMException
    {
<<FOREACHATTR>>
<<ARRAY>>

        pdo.declareAttr(name + ".${name}","UCARRAY");
        new ${class_prefix}${type}(null).declareAttributes(pdo, name + ".${name}");
<<ARRAY>>
<<CLASS>>

        pdo.declareAttr(name + ".${name}","USERCLASS");
        new ${class_prefix}${type}(null).declareAttributes(pdo, name + ".${name}");
<<CLASS>>
<<SCALAR>>
        pdo.declareAttr(name + ".${name}","${PDOtype}");
<<SCALAR>>
<<FOREACHATTR>>
    }

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : setAttributes
     * -->
     * <pre>
     * Description : Set the attributes of this class on the given paramater object.
     *
     * @param pdo, the parameter object to set the attributes on
     * @param name, the name of this class in your OpenROAD application
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void setAttributes(ParameterData pdo, String name) throws COMException
    {
<<FOREACHATTR>>
<<ARRAY>>

        if (${langname} != null)
        {
            for(int i=1; i<=${langname}.length; i++)
            {
                ${langname}[i-1].setAttributes(pdo, name + ".${name}[" + i + "]");
            }
        }
        else
        {
            pdo.setNull(name + ".${name}");
        }
<<ARRAY>>
<<CLASS>>

        if (${langname} != null)
        {
            ${langname}.setAttributes(pdo, name + ".${name}");
        }
<<CLASS>>
<<SCALAR>>
<<NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        if (${langname} != null)
        {
            pdo.set${accesstype}(name + ".${name}", ${langname});
        }
        else
        {
            pdo.setNull(name + ".${name}");
        }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

        if (${langname} != null)
        {
            if {${langname}.isBlank())
            {
                pdo.setBlankDate(name + ".${name}");
            }
            else
            {
                if(OpenROADDateTime.class.isInstance(${langname}))
                {
                    pdo.setDate(name + ".${name}", ${langname});
                }
                else
                {
                    pdo.setDateWithoutTime(name + ".${name}", ${langname});
                }
            }
        }
        else
        {
            pdo.setNull(name + ".${name}");
        }
<<ONLYIF>><<DATETIME>>
<<NULLABLE>>
<<!NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        pdo.set${accesstype}(name + ".${name}", ${langname});
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

        if {${langname}.isBlank())
        {
            pdo.setBlankDate(name + ".${name}");
        }
        else
        {
            if(OpenROADDateTime.class.isInstance(${langname}))
            {
                pdo.setDate(name + ".${name}", ${langname});
            }
            else
            {
                pdo.setDateWithoutTime(name + ".${name}", ${langname});
            }
        }
<<ONLYIF>><<DATETIME>>
<<!NULLABLE>>
<<SCALAR>>
<<FOREACHATTR>>
    }

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : populateAttributes
     * -->
     * <pre>
     * Description : Repopulate this object from the given parameter object.
     *
     * @param pdo, the parameter object to get the attributes from to repopulate this object
     * @param name, the name of this class in your openroad application
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void populateAttributes(ParameterData pdo, String name) throws COMException
    {
<<FOREACHATTR>>
<<ARRAY>>

        if (pdo.isNull(name + ".${name}") == false)
        {
            int ii_count = pdo.lastRow(name + ".${name}");
            ${langname} = new ${class_prefix}${type}[ii_count];

            for(int i=1; i<=ii_count; i++)
            {
                ${class_prefix}${type} iiobtmp = new ${class_prefix}${type}(this.aso);
                iiobtmp.populateAttributes(pdo, name + ".${name}[" + i + "]");
                ${langname}[i-1] = iiobtmp;
            }
        }
        else
        {
            ${langname} = null;
        }
<<ARRAY>>
<<CLASS>>

        if (pdo.isNull(name + ".${name}") == false)
        {
            ${langname} = new ${class_prefix}${type}(this.aso);
            ${langname}.populateAttributes(pdo, name + ".${name}");
        }
        else
        {
            ${langname} = null;
        }
<<CLASS>>
<<SCALAR>>
<<NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        if (pdo.isNull(name + ".${name}") == false)
        {
            ${langname} = pdo.get${accesstype}(name + ".${name}");
        }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

        if (pdo.isNull(name + ".${name}") == false)
        {
            if (pdo.isBlankDate(name + ".${name}") == false)
            {
                if (pdo.isDateWithoutTime(name + ".${name}"))
                {
                    ${langname} = new OpenROADDate(pdo.get${accesstype}(name + ".${name}").getTime());
                }
                else
                {
                    ${langname} = new OpenROADDateTime(pdo.get${accesstype}(name + ".${name}").getTime());
                }
            }
            else
            {
                ${langname} = OpenROADDate.getBlankDate();
            }
        }
<<ONLYIF>><<DATETIME>>
<<NULLABLE>>
<<!NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        ${langname} = pdo.get${accesstype}(name + ".${name}");
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>
        if (pdo.isBlankDate(name + ".${name}") == false)
        {
            if (pdo.isDateWithoutTime(name + ".${name}"))
            {
                ${langname} = new OpenROADDate(pdo.get${accesstype}(name + ".${name}").getTime());
            }
            else
            {
                ${langname} = new OpenROADDateTime(pdo.get${accesstype}(name + ".${name}").getTime());
            }
        }
        else
        {
            ${langname} = OpenROADDate.getBlankDate();
        }
<<ONLYIF>><<DATETIME>>
<<!NULLABLE>>
<<SCALAR>>
<<FOREACHATTR>>
   }
<<FOREACHSCP>>

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : *L*${scp_name}
     * -->
     * <pre>
     * Description : Calls the ${scp_name} method
     *
<<FOREACHPARAM>>
<<ARRAY>>
<<!DV_NULL>>
     * @param ${langname} ${class_prefix}${type}[] default system
<<!DV_NULL>>
<<DV_NULL>>
     * @param ${langname} ${class_prefix}${type}[] default null
<<DV_NULL>>
<<ARRAY>>
<<CLASS>>
<<!DV_NULL>>
     * @param ${langname} ${class_prefix}${type} default system
<<!DV_NULL>>
<<DV_NULL>>
     * @param ${langname} ${class_prefix}${type} default null
<<DV_NULL>>
<<CLASS>>
<<SCALAR>>
<<!DV_NULL>>
     * @param ${langname} ${type} default ${default_value}
<<!DV_NULL>>
<<DV_NULL>>
     * @param ${langname} ${type} default null
<<DV_NULL>>
<<SCALAR>>
<<FOREACHPARAM>>
     * @throws COMException
     * @throws IllegalArgumentException
     * @throws FatalOSCAException
     * @throws UserOSCAException
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void *L*${scp_name}(HashMap params) throws COMException, IllegalArgumentException,
        FatalOSCAException, UserOSCAException
    {
        ParameterData byref = new ParameterData();
        try
        {
            Collection pset = new ArrayList(params.keySet());
<<FOREACHPARAM>>
            pset.remove("${langname}");
<<ARRAY>>

            if (params.containsKey("${langname}"))
            {
                byref.declareAttr("${name}", "UCARRAY");
                new ${class_prefix}${type}(null).declareAttributes(byref,"${name}");
            }
<<ARRAY>>
<<CLASS>>

            if (params.containsKey("${langname}"))
            {
                byref.declareAttr("${name}", "USERCLASS");
                new ${class_prefix}${type}(null).declareAttributes(byref,"${name}");
            }
<<CLASS>>
<<SCALAR>>

            if (params.containsKey("${langname}"))
            {
                byref.declareAttr("${name}","${PDOtype}");
            }
<<SCALAR>>
<<FOREACHPARAM>>

            // Check if the caller passed in a unknown parameter
            if (!pset.isEmpty())
            {

                throw new IllegalArgumentException("Unknown parameter" +
                                  (pset.size() > 1 ? "s " : " ") +  Arrays.toString(pset.toArray()));
            }

            // Setup the data.
<<FOREACHPARAM>>
<<ARRAY>>

            if (params.containsKey("${langname}"))
            {
                if (params.get("${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else {
                    ${class_prefix}${type}[] iiarrtmp = (${class_prefix}${type}[])params.get("${langname}");
                    for(int i=0;i< iiarrtmp.length;i++)
                    {
                        ${class_prefix}${type} iiobtmp = iiarrtmp[i];
                        iiobtmp.setAttributes(byref, "${name}[" + i + "]");
                    }
                }
            }
<<ARRAY>>
<<CLASS>>

            if (params.containsKey("${langname}"))
            {
                if (params.get("${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else {
                    ${class_prefix}${type} iiobtmp = (${class_prefix}${type}) params.get("${langname}");
                    iiobtmp.setAttributes(byref, "${name}");
                }
            }
<<CLASS>>
<<SCALAR>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>

            if (params.containsKey("${langname}"))
            {
                if (params.get("${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else {
                    byref.set${accesstype}("${name}", (${type})params.get("${langname}"));
                }
            }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

            if (params.containsKey("${langname}"))
            {
                if (params.get("${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else
                {
                    if ((Date)params.get("${langname}") == OpenROADDate.getBlankDate())
                    {
                        byref.setBlankDate("${name}");
                    }
                    else
                    {
                        if (OpenROADDateTime.class.isInstance(params.get("${langname}"))
                        {
                            byref.setDate("${name}", (Date)params.get("${langname}"));
                        }
                        else
                        {
                            byref.setDateWithoutTime("${name}", (Date)params.get("${langname}"));
                        }
                    }
                }
            }
<<ONLYIF>><<DATETIME>>
<<SCALAR>>
<<FOREACHPARAM>>

          this.aso.callProc("${scp_name}", null, byref);
<<FOREACHPARAM>>
<<ARRAY>>

            if (params.containsKey("${langname}"))
            {
                params.remove("${langname}");

                if (byref.isNull("${name}") == false)
                {
                    int ii_count = byref.lastRow("${name}");
                    ${class_prefix}${type}[] ${langname} = new ${class_prefix}${type}[ii_count];

                    for(int i=1; i<=ii_count; i++)
                    {
                        ${class_prefix}${type} iiobtmp = new ${class_prefix}${type}(this.aso);
                        iiobtmp.populateAttributes(byref, "${name}[" + i + "]");
                        ${langname}[i-1] = iiobtmp;
                    }
                    params.put("${langname}", ${langname});
                }
                else
                {
                    params.put("${langname}", null);
                }
            }
<<ARRAY>>
<<CLASS>>

            if (params.containsKey("${langname}"))
            {
                params.remove("${langname}");

                if (byref.isNull("${name}") == false)
                {
                  ${class_prefix}${type} ${name} = new ${class_prefix}${type}(this.aso);
                  ${name}.populateAttributes(byref, "${name}");
                  params.put("${langname}", ${name});
                }
                else
                {
                    params.put("${langname}", null);
                }
            }
<<CLASS>>
<<SCALAR>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>

            if (params.containsKey("${langname}"))
            {
                params.remove("${langname}");

                if (byref.isNull("${name}") == false)
                {
                    params.put("${langname}", byref.get${accesstype}("${name}"));
                }
                else
                {
                    params.put("${langname}",null);
                }
            }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

            if (params.containsKey("${langname}"))
            {
                if (byref.isNull("${name}") == false)
                {
                    if (byref.isBlankDate("${name}") == false)
                    {
                        if (byref.isDateWithoutTime("${name}"))
                        {
                            params.put("${langname}",new OpenRoadDate(byref.getDate("${name}")));
                        }
                        else
                        {
                            params.put("${langname}",new OpenRoadDateTime(byref.getDate("${name}")));
                        }
                    }
                    else
                    {
                        params.put("${langname}", OpenRoadDate.BLANK_DATE);
                    }
                }
                else
                {
                    params.put("${langname",null);
                }
            }
<<ONLYIF>><<DATETIME>>
<<SCALAR>>
<<FOREACHPARAM>>

            switch(this.aso.getOscaErrorType())
            {
                case OSCAError.FATAL_ERROR_TYPE:
                    throw new FatalOSCAException(this.aso.getOscaErrorNo(),
                        this.aso.getOscaMsgTxt());
                case OSCAError.USER_ERROR_TYPE:
                    throw new UserOSCAException(this.aso.getOscaErrorNo(),
                        this.aso.getOscaMsgTxt());
                case OSCAError.INFO_ERROR_TYPE:
                    /*
                     * This is an info error so only needs to be logged.
                     * You should replace this with your own logging code like log4j.
                     */
                    System.out.println("OSCAError[INFO ONLY]: " +
                        this.aso.getOscaMsgTxt());
                    break;
            }
        }
        finally {
            if (byref != null)
            {
                byref.release();
            }
        }
    }
<<FOREACHSCP>>
}
