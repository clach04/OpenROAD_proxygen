
<<DOCHISTORY>>
/*-------------------------------------------------------------------------------------------------*/
/* Copyright Luminary Solutions Limited                                                            */
/*-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/
/*                                                                                                 */
/* Template:       : Facade.tpl                                                                    */
/*                                                                                                 */
/* Template Name   : OpenROAD Class Proxy Template                                                 */
/*                                                                                                 */
/* System Name     : ProxyGen                                                                      */
/*                                                                                                 */
/* Sub-System Name : SCP Facade                                                                    */
/*                                                                                                 */
/* Author          : Luminary - An Ingres Company                                                  */
/*                                                                                                 */
/* Date            : 10/06/2008                                                                    */
/*                                                                                                 */
/* Description     : Generates a single class with methods for each SCP                            */
/*                                                                                                 */
/* Version History                                                                                 */
/*                                                                                                 */
/* Version Date     Who   Description                                                              */
/* ------- -------- ----- -----------                                                              */
/* 1.0     10/06/08 LUM   Original version.                                                        */
/*-------------------------------------------------------------------------------------------------*/
<<DOCHISTORY>>
#region Copyright
/*
 * Copyright ${copyright_holder}
 *
 */
#endregion

#region Code Header
/*
 * Author               : Generated By ProxyGen (Luminary Solutions)
 *
 * File Name            : ${AppService Name}SCPW.cs
 *
 * Description          : Generated by ProxyGen from the ${AppService Name} Application Service.
 *                        This code should not be modified.
 *
 * Version History
 *
 * Version  Date                 Who     Description
 * -------  ----------           ---     --------------
 * 1.0      ${datenow}           ${username}     Original Generated Version.
 */
#endregion

#region Namespaces Used
using System;
using System.Data;
using System.Xml;
using System.Runtime.InteropServices;
using ORRSOLib;
using Luminary.ProxyGen.Util;
using ${namespace_prefix}.DTO;
using ${namespace_prefix}.ApplicationServices.Wrappers;
#endregion

namespace ${namespace_prefix}.ApplicationServices.Facades
{
    /// <summary>
    /// ${AppService Name} Application Service Facade
    /// </summary>
    /// <remarks>
    /// ${AppService Name} Application Service Facade. Provides methods
    /// for each exposed SCP of the ${AppService Name} Application
    /// Service OpenROAD ASA.
    /// </remarks>
    public class ${AppService Name}Facade : BaseFacade
    {
    #region Fields
    #endregion

    #region Properties
    #endregion

    #region Class Constructors
        /// <summary>
        /// Default Constructor.
        /// <summary>
        public ${AppService Name}Facade() : base()
        {
        }

        /// <summary>
        /// Detail Constructor
        /// </summary>
        /// <remarks>
        /// Already connected session constructor. Takes a connected OpenROAD
        /// Application Server Object (ASO) and calls the base constructor.
        /// </remarks>
        /// <param name="orSession">An OpenROAD Application Server Object.</param>
        public ${AppService Name}Facade(ORASOSessionClass orSession) : base(orSession)
        {
        }

        /// <summary>
        /// Detail Constructor
        /// </summary>
        /// <remarks>
        /// Manual connected session constructor. Takes a connected OpenROAD
        /// Application Server Object (ASO) and calls the base constructor.
        /// </remarks>
        /// <param name="akaName">Application Known As Name as set in VOSA</param>
        /// <param name="location">Machine running the OpenROAD server</param>
        /// <param name="routing"></param>
        /// <param name="flags"></param>
        /// <param name="connectionType"></param>
        public ${AppService Name}Facade(string akaName,
                                        string location,
                                        string routing,
                                        string flags,
                                        ConnectionTypes connectionType)
            : base(akaName, location, routing, flags, connectionType)
        {
        }
        #endregion

        #region Class Methods

<<FOREACHSCP>>
<<!NAME=>>(DefineBPM)(CreateASOSession)(DestroyASOSession)(Ping)
        /// <summary>
        /// ${altscp_name}
        /// </summary>
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
        /// <param name="*L*${langname}"></param>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
        /// <exception cref="SCPInvalidArgumentException">Invalid SCP Arguments</exception>
        /// <exception cref="SCPCallException">SCP Call</exception>

<<FLAT>>
        public void ${altscp_name}(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
${ref} ${type} *L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*U*${type} *L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
List<*U*${type}> *L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
)
<<FLAT>>
        {
            //Establish the SCP Wrapper and invoke the method call.
            ${altscp_name}SCPW ob = new ${altscp_name}SCPW(ORSession);

<<FLAT>>
            ob.CallSCP(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
${ref} *L*${langname}
<<SCALAR>>
<<CLASS>>
*L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
*L*${langname}
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
);
<<FLAT>>
        }
<<!NAME=>>(DefineBPM)(CreateASOSession)(DestroyASOSession)(Ping)
<<FOREACHSCP>>
        #endregion
    }
}
