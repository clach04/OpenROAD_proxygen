
<<DOCHISTORY>>
/*-------------------------------------------------------------------------------------------------*/
/* Copyright Luminary Solutions Limited                                                            */
/*-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/
/*                                                                                                 */
/* Template:       : SCPW.tpl                                                                      */
/*                                                                                                 */
/* Template Name   : OpenROAD Class Proxy Template                                                 */
/*                                                                                                 */
/* System Name     : ProxyGen                                                                      */
/*                                                                                                 */
/* Sub-System Name : SCP worker class                                                              */
/*                                                                                                 */
/* Author          : Luminary - An Ingres Company                                                  */
/*                                                                                                 */
/* Date            : 10/06/2008                                                                    */
/*                                                                                                 */
/* Description     : Used by the facade class to call the individual SCPs                          */
/*                                                                                                 */
/* Version History                                                                                 */
/*                                                                                                 */
/* Version Date     Who   Description                                                              */
/* ------- -------- ----- -----------                                                              */
/* 1.0     10/06/08 LUM   Original version.                                                        */
/*-------------------------------------------------------------------------------------------------*/
<<DOCHISTORY>>
#region Copyright
/*
 * Copyright ${copyright_holder}
 *
 */
#endregion

#region Code Header
/*
 * Author               : Generated By ProxyGen (Luminary Solutions)
 *
 * File Name            : ${altscp_name}SCPW.cs
 *
 * Description          : Generated by ProxyGen from the ${AppService Name} Application Service.
 *                        This code should not be modified.
 *
 * Version History
 *
 * Version  Date                 Who     Description
 * -------  ----------           ---     --------------
 * 1.0      ${datenow}           ${username}     Original Generated Version.
 */
#endregion
using System;
using System.Data;
using ORRSOLib;
using Luminary.ProxyGen.Util;
using ${namespace_prefix}.DTO;

namespace ${namespace_prefix}.ApplicationServices.Wrappers
{
    public class ${altscp_name}SCPW : SCPWrapperBase
    {

        #region Class Properties
        /// <summary>
        /// The SCP Name.
        /// </summary>
        protected override string SCPName
        {
            get
            {
                return "${scp_name}";
            }
        }
        #endregion

        #region Class Constructors
        /// <summary>
        /// Connected OpenROAD ASO Session Parameter and Details Constructor.
        /// </summary>
        /// <param name="objOR">OpenROAD Application Session Object session</param>
        public ${altscp_name}SCPW(ORASOSessionClass objOR) : base(objOR)
        {
        }
        #endregion

        #region Class Methods

        /// <summary>
        /// Declare the Attributes.
        /// </summary>
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
        /// <param name="*L*${langname}"></param>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>

<<FLAT>>
        protected void DeclareAttributes(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
${type} *L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*U*${type} *L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
List<*U*${type}> *L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
)
<<FLAT>>
        {
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
              AttributeManager.DeclareAttribute(ORByRefParameter, "${name}", ${datatype});
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
              AttributeManager.DeclareAttribute(ORByRefParameter, "${name}", Constants.OR_ASA_DATATYPE_USERCLASS);
              ${AppService Name}Populator.DeclarePDOFromObject(ORByRefParameter, "${name}", *L*${langname}*Class*);
<<CLASS>>
<<ARRAY>>
              AttributeManager.DeclareAttribute(ORByRefParameter, "${name}", Constants.OR_ASA_DATATYPE_UCARRAY);
              ${AppService Name}Populator.DeclarePDOFromObject(ORByRefParameter, "${name}", new *U*${type}());
<<ARRAY>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>

        }

        /// <summary>
        /// Pack the OpenROAD PDO.
        /// </summary>
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
        /// <param name="*L*${langname}"></param>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>

<<FLAT>>
        protected void PackData(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
${type} *L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*U*${type} *L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
List<*U*${type}> *L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
)
<<FLAT>>
        {
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
              AttributeManager.SetAttribute(ORByRefParameter, "${name}", *L*${langname});
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
              ${AppService Name}Populator.PopulatePDOFromObject(ORByRefParameter, "${name}", *L*${langname}*Class*);
<<CLASS>>
<<ARRAY>>
              ${AppService Name}Populator.PopulatePDOFromObject(ORByRefParameter, "${name}", *L*${langname}*List*);
<<ARRAY>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>

        }

        /// <summary>
        /// Unpack the OpenROAD PDO.
        /// </summary>
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
        /// <param name="*L*${langname}"></param>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>

<<FLAT>>
        protected void UnpackData(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
${ref} ${type} *L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*U*${type} *L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
List<*U*${type}> *L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
)
<<FLAT>>
        {
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
              *L*${langname} = AttributeManager.Get${access}Attribute(ORByRefParameter, "${name}");
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
              ${AppService Name}Depopulator.DepopulatePDOToObject(ORByRefParameter, "${name}", *L*${langname}*Class*);
<<CLASS>>
<<ARRAY>>
              ${AppService Name}Depopulator.DepopulatePDOToObject(ORByRefParameter, "${name}", *L*${langname}*List*);
<<ARRAY>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>

        }

        /// <summary>
        /// Make the call to the OpenROAD SCP "${scp_name}".
        /// </summary>
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
        /// <param name="*L*${langname}"></param>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
        // Logging and Security Attributes could be added here to intercept
        // calls to the SCP.

<<FLAT>>
        public void CallSCP(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
${ref} ${type} *L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*U*${type} *L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
List<*U*${type}> *L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
)
<<FLAT>>
        {
            base.DeclareAttributes();

            // Declare the parameter objects.

<<FLAT>>
            DeclareAttributes(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
*L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
*L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
);
<<FLAT>>

            // Pack the data into the PDO.

<<FLAT>>
            PackData(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
*L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
*L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
);
<<FLAT>>

            try
            {
                // Call the SCP.
                Object ORByValParameterParam = ORByValParameter;
                Object ORByRefParameterParam = ORByRefParameter;

                CallSCPProcedure(SCPName, ref ORByValParameterParam, ref ORByRefParameterParam);

            }
            catch (SCPInvalidArgumentException)
            {
                // Throw it on.
                throw;
            }
            catch (SCPCallException)
            {
                // Throw it on.
                throw;
            }
            catch (Exception ex)
            {
                // Something went wrong in the call of the SCP - throw it on.
                throw new SCPCallException(ex.Message);
            }

            // Unpack the data out of the PDO.

<<FLAT>>
            UnpackData(
<<FOREACHPARAM>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<SCALAR>>
<<!NULLABLE>>
${ref} *L*${langname}
<<!NULLABLE>>
<<NULLABLE>>
There's a nullable scalar in this SCP. Is that what you want?
<<NULLABLE>>
<<SCALAR>>
<<CLASS>>
*L*${langname}*Class*
<<CLASS>>
<<ARRAY>>
*L*${langname}*List*
<<ARRAY>>
<<!LAST>>
,
<<!LAST>>
<<!NAME=>>(p_so_xmlin)(b_osca)(b_so_xml)(p_arr_UCXML_Include)
<<FOREACHPARAM>>
);
<<FLAT>>

        }
        #endregion
    }
}
