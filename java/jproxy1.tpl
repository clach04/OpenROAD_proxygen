
<<DOCHISTORY>>
/*-------------------------------------------------------------------------------------------------*/
/* Copyright Luminary Solutions Limited                                                            */
/*-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/
/*                                                                                                 */
/* Template:       : jproxy1.tpl                                                                   */
/*                                                                                                 */
/* Template Name   : OpenROAD Class Proxy Template                                                 */
/*                                                                                                 */
/* System Name     : ProxyGen                                                                      */
/*                                                                                                 */
/* Sub-System Name : Default Java Templates                                                        */
/*                                                                                                 */
/* Author          : Anthony Simpson (Luminary - An Ingres Company)                                */
/*                                                                                                 */
/* Date            : 02/04/2008                                                                    */
/*                                                                                                 */
/* Description     : Used to generate a proxy wrapper for an OpenROAD class.                       */
/*                                                                                                 */
/* Version History                                                                                 */
/*                                                                                                 */
/* Version Date     Who   Description                                                              */
/* ------- -------- ----- -----------                                                              */
/* 1.0     02/04/08 AGS   Original version.                                                        */
/*-------------------------------------------------------------------------------------------------*/
<<DOCHISTORY>>
/**
 * Copyright ${copyright_holder}
 *
 */
package ${lib_name}.${app_name};

import java.util.ArrayList;
import java.util.Iterator;
import com.ca.openroad.*;
import uk.co.luminary.proxygen.util.*;
<<FOREACHAPP>>
import ${lib_name}.${includedapp}.*;
<<FOREACHAPP>>

 /**
 * <!-- ----------------------------------------------------------------------------------------- -->
 * <pre>
 * Description     : Generated by ProxyGen using template file jproxy1.tpl
 * <!--
 * Interface       : ${lib_name}.${app_name}.${class_prefix}*U*${class_langname}
 * System Name     : ${aka_name}
 * Sub-System Name : ${app_name}
 *
 * Version History
 *
 * Version  Date        Who     Description
 * -------  ----------- -----   -----------
 * 1.0      ${datenow}  ${username}     Original version.
 * </pre>
 * -->
 * @author ProxyGen (jproxy1.tpl)
 * @version Revision $Revision$ created on $Date$ by $Author$
 *
 * <!-- ----------------------------------------------------------------------------------------- -->
 */
public class ${class_prefix}*U*${class_langname} implements OpenROADClass {
<<FOREACHATTR>>
<<ARRAY>>
<<!DV_NULL>>
    private ArrayList<${class_prefix}*U*${type}> *L*${langname} = new ArrayList<${class_prefix}*U*${type}>();
<<!DV_NULL>>
<<DV_NULL>>
    private ArrayList<${class_prefix}*U*${type}> *L*${langname} = null;
<<DV_NULL>>
<<ARRAY>>
<<CLASS>>
    private ${class_prefix}*U*${type} *L*${langname} = null;
<<CLASS>>
<<SCALAR>>
<<!DV_NULL>>
<<ONLYIF>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
    private ${type} *L*${langname} = new ${type}(${default_value});
<<ONLYIF>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<STRING>>
    private ${type} *L*${langname} = new ${type}(${default_value});
<<ONLYIF>><<STRING>>
<<ONLYIF>><<DATETIME>>
    private ${type} *L*${langname} = new ${type}();
<<ONLYIF>><<DATETIME>>
<<ONLYIF>><<BYTEARRAY>>
    private ${type} *L*${langname} = null;
<<ONLYIF>><<BYTEARRAY>>
<<!DV_NULL>>
<<DV_NULL>>
    private ${type} *L*${langname} = null;
<<DV_NULL>>
<<SCALAR>>
<<FOREACHATTR>>
    private ASOSession aso = null;

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : ${class_prefix}*U*${class_langname}
     * -->
     * <pre>
     * Description : Constructor.
     *
     * @param aso, an ASOSession object to use to connect to the OpenROAD application server.
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public ${class_prefix}*U*${class_langname} (ASOSession aso)
    {
        this.aso = aso;
<<CLASS>>
<<!DV_NULL>>
        this.*L*${langname} = new ${class_prefix}*U*${type}(this.aso);
<<!DV_NULL>>
<<CLASS>>
    }

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : ${class_prefix}*U*${class_langname}
     * -->
     * <pre>
     * Description : Constructor.
<<FOREACHATTR>>
<<ARRAY>>
<<!DV_NULL>>
     * @param *L*${langname} ArrayList<${class_prefix}*U*${type}> default system
<<!DV_NULL>>
<<DV_NULL>>
     * @param *L*${langname} ArrayList<${class_prefix}*U*${type}> default null
<<DV_NULL>>
<<ARRAY>>
<<CLASS>>
<<!DV_NULL>>
     * @param *L*${langname} ${class_prefix}*U*${type} default system
<<!DV_NULL>>
<<DV_NULL>>
     * @param *L*${langname} ${class_prefix}*U*${type} default null
<<DV_NULL>>
<<CLASS>>
<<SCALAR>>
<<!DV_NULL>>
     * @param *L*${langname} ${type} default ${default_value}
<<!DV_NULL>>
<<DV_NULL>>
     * @param *L*${langname} ${type} default null
<<DV_NULL>>
<<SCALAR>>
<<FOREACHATTR>>
     * @param aso, an ASOSession object to use to connect to the OpenROAD application server.
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public ${class_prefix}*U*${class_langname} (ASOSession aso
<<FOREACHATTR>>
<<ARRAY>>
, ArrayList<${class_prefix}*U*${type}> *L*${langname}
<<ARRAY>>
<<CLASS>>
, ${class_prefix}*U*${type} *L*${langname}
<<CLASS>>
<<SCALAR>>
, ${type} *L*${langname}
<<SCALAR>>
<<FOREACHATTR>>
)
    {
        this.aso = aso;
<<FOREACHATTR>>
        this.set*U*${langname}(*L*${langname});
<<FOREACHATTR>>
    }
<<FOREACHATTR>>
    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : get*U*${langname}
     * -->
     * <pre>
     * Description : Getter for *L*${langname}
     *
     * @returns *L*${langname}
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
<<ARRAY>>
    public ArrayList<${class_prefix}*U*${type}> get*U*${langname} ()
<<ARRAY>>
<<CLASS>>
    public ${class_prefix}*U*${type} get*U*${langname} ()
<<CLASS>>
<<SCALAR>>
    public ${type} get*U*${langname} ()
<<SCALAR>>
    {
        return this.*L*${langname};
    }
    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : set*U*${langname}
     * -->
     * <pre>
     * Description : Setter for *L*${langname}
     *
     * @param *L*${langname}, the variable to set to.
<<!DV_NULL>>
     * @throws IllegalArgumentException if *L*${langname} is null
<<!DV_NULL>>
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
<<ARRAY>>
    public void set*U*${langname} (ArrayList<${class_prefix}*U*${type}> *L*${langname})
    {
<<ARRAY>>
<<CLASS>>
    public void set*U*${langname} (${class_prefix}*U*${type} *L*${langname})
    {
<<CLASS>>
<<SCALAR>>
    public void set*U*${langname} (${type} *L*${langname})
    {
<<SCALAR>>
<<!DV_NULL>>
        if (*L*${langname} == null)
        {
            throw new IllegalArgumentException("*L*${langname} can not be null");
        }
<<!DV_NULL>>
        this.*L*${langname} = *L*${langname};
    }
<<FOREACHATTR>>

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : declareAttributes
     * -->
     * <pre>
     * Description : Declare the attributes of this class on the given paramater object.
     *
     * @param pdo, the parameter object to declare the attributes on
     * @param name, the name of this class in your OpenROAD application
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void declareAttributes(ParameterData pdo, String name) throws COMException
    {
<<FOREACHATTR>>
<<ARRAY>>
        pdo.declareAttr(name + ".${name}","UCARRAY");
        new ${class_prefix}*U*${type}(null).declareAttributes(pdo, name + ".${name}");
<<ARRAY>>
<<CLASS>>

        pdo.declareAttr(name + ".${name}","USERCLASS");
        new ${class_prefix}*U*${type}(null).declareAttributes(pdo, name + ".${name}");
<<CLASS>>
<<SCALAR>>
        pdo.declareAttr(name + ".${name}","${PDOtype}");
<<SCALAR>>
<<FOREACHATTR>>
    }

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : setAttributes
     * -->
     * <pre>
     * Description : Set the attributes of this class on the given paramater object.
     *
     * @param pdo, the parameter object to set the attributes on
     * @param name, the name of this class in your OpenROAD application
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void setAttributes(ParameterData pdo, String name) throws COMException
    {
<<FOREACHATTR>>
<<ARRAY>>
        if (*L*${langname} != null)
        {
            int count = 1;
            for(${class_prefix}*U*${type} userClass : *L*${langname})
            {
                userClass.setAttributes(pdo, name + ".${name}[" + count++ + "]");
            }
        }
        else
        {
            pdo.setNull(name + ".${name}");
        }
<<ARRAY>>
<<CLASS>>

        if (*L*${langname} != null)
        {
            *L*${langname}.setAttributes(pdo, name + ".${name}");
        }
<<CLASS>>
<<SCALAR>>
<<NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        if (*L*${langname} != null)
        {
            pdo.set${accesstype}(name + ".${name}", *L*${langname});
        }
        else
        {
            pdo.setNull(name + ".${name}");
        }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

        if (*L*${langname} != null)
        {
            if (*L*${langname}.isBlank())
            {
                pdo.setBlankDate(name + ".${name}");
            }
            else
            {
                if(OpenROADDateTime.class.isInstance(*L*${langname}))
                {
                    pdo.setDate(name + ".${name}", *L*${langname});
                }
                else
                {
                    pdo.setDateWithoutTime(name + ".${name}", *L*${langname});
                }
            }
        }
        else
        {
            pdo.setNull(name + ".${name}");
        }
<<ONLYIF>><<DATETIME>>
<<NULLABLE>>
<<!NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        pdo.set${accesstype}(name + ".${name}", *L*${langname});
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

        if (*L*${langname}.isBlank())
        {
            pdo.setBlankDate(name + ".${name}");
        }
        else
        {
            if(OpenROADDateTime.class.isInstance(*L*${langname}))
            {
                pdo.setDate(name + ".${name}", *L*${langname});
            }
            else
            {
                pdo.setDateWithoutTime(name + ".${name}", *L*${langname});
            }
        }
<<ONLYIF>><<DATETIME>>
<<!NULLABLE>>
<<SCALAR>>
<<FOREACHATTR>>
    }

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : populateAttributes
     * -->
     * <pre>
     * Description : Repopulate this object from the given parameter object.
     *
     * @param pdo, the parameter object to get the attributes from to repopulate this object
     * @param name, the name of this class in your openroad application
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void populateAttributes(ParameterData pdo, String name) throws COMException
    {
<<FOREACHATTR>>
<<ARRAY>>

        if (pdo.isNull(name + ".${name}") == false)
        {
            int ii_count = pdo.lastRow(name + ".${name}");
            *L*${langname} = new ArrayList<${class_prefix}*U*${type}>();

            for(int i=1; i<=pdo.lastRow(name + ".${name}"); i++)
            {
                ${class_prefix}*U*${type} iiobtmp = new ${class_prefix}*U*${type}(this.aso);
                iiobtmp.populateAttributes(pdo, name + ".${name}[" + i + "]");
                *L*${langname}.add(iiobtmp);
            }
        }
        else
        {
            *L*${langname} = null;
        }
<<ARRAY>>
<<CLASS>>

        if (pdo.isNull(name + ".${name}") == false)
        {
            *L*${langname} = new ${class_prefix}*U*${type}(this.aso);
            *L*${langname}.populateAttributes(pdo, name + ".${name}");
        }
        else
        {
            *L*${langname} = null;
        }
<<CLASS>>
<<SCALAR>>
<<NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        if (pdo.isNull(name + ".${name}") == false)
        {
            *L*${langname} = pdo.get${accesstype}(name + ".${name}");
        }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

        if (pdo.isNull(name + ".${name}") == false)
        {
            if (pdo.isBlankDate(name + ".${name}") == false)
            {
                if (pdo.isDateWithoutTime(name + ".${name}"))
                {
                    *L*${langname} = new OpenROADDate(pdo.get${accesstype}(name + ".${name}").getTime());
                }
                else
                {
                    *L*${langname} = new OpenROADDateTime(pdo.get${accesstype}(name + ".${name}").getTime());
                }
            }
            else
            {
                *L*${langname} = OpenROADDate.getBlankDate();
            }
        }
<<ONLYIF>><<DATETIME>>
<<NULLABLE>>
<<!NULLABLE>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
        *L*${langname} = pdo.get${accesstype}(name + ".${name}");
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>
        if (pdo.isBlankDate(name + ".${name}") == false)
        {
            if (pdo.isDateWithoutTime(name + ".${name}"))
            {
                *L*${langname} = new OpenROADDate(pdo.get${accesstype}(name + ".${name}").getTime());
            }
            else
            {
                *L*${langname} = new OpenROADDateTime(pdo.get${accesstype}(name + ".${name}").getTime());
            }
        }
        else
        {
            *L*${langname} = OpenROADDate.getBlankDate();
        }
<<ONLYIF>><<DATETIME>>
<<!NULLABLE>>
<<SCALAR>>
<<FOREACHATTR>>
    }
<<FOREACHSCP>>

    /**
     * <!-- ------------------------------------------------------------------------------------- -->
     * <!--
     * Method Name : *L*${scp_name}
     * -->
     * <pre>
     * Description : Calls the ${scp_name} method
     *
<<FOREACHPARAM>>
<<ARRAY>>
<<!DV_NULL>>
     * @param *L*${langname} ArrayList<${class_prefix}*U*${type}> default system
<<!DV_NULL>>
<<DV_NULL>>
     * @param *L*${langname} ArrayList<${class_prefix}*U*${type}> default null
<<DV_NULL>>
<<ARRAY>>
<<CLASS>>
<<!DV_NULL>>
     * @param *L*${langname} ${class_prefix}*U*${type} default system
<<!DV_NULL>>
<<DV_NULL>>
     * @param *L*${langname} ${class_prefix}*U*${type} default null
<<DV_NULL>>
<<CLASS>>
<<SCALAR>>
<<!DV_NULL>>
     * @param *L*${langname} ${type} default ${default_value}
<<!DV_NULL>>
<<DV_NULL>>
     * @param *L*${langname} ${type} default null
<<DV_NULL>>
<<SCALAR>>
<<FOREACHPARAM>>
     * @throws COMException
     * @throws IllegalArgumentException
     * @throws FatalOSCAException
     * @throws UserOSCAException
     * </pre>
     * <!-- ------------------------------------------------------------------------------------- -->
     */
    public void *L*${scp_name}(HashMap params) throws COMException, IllegalArgumentException,
        FatalOSCAException, UserOSCAException
    {
        //Set the BPM on the server to this class
        this.aso.defineBPM("${class_name}");
        ParameterData byref = new ParameterData();
        try
        {
            Collection pset = new ArrayList(params.keySet());
<<FOREACHPARAM>>
            pset.remove("*L*${langname}");
<<ARRAY>>

            if (params.containsKey("*L*${langname}"))
            {
                byref.declareAttr("${name}", "UCARRAY");
                new ${class_prefix}*U*${type}(null).declareAttributes(byref,"${name}");
            }
<<ARRAY>>
<<CLASS>>

            if (params.containsKey("*L*${langname}"))
            {
                byref.declareAttr("${name}", "USERCLASS");
                new ${class_prefix}*U*${type}(null).declareAttributes(byref,"${name}");
            }
<<CLASS>>
<<SCALAR>>

            if (params.containsKey("*L*${langname}"))
            {
                byref.declareAttr("${name}","${PDOtype}");
            }
<<SCALAR>>
<<FOREACHPARAM>>

            // Check if the caller passed in a unknown parameter
            if (!pset.isEmpty())
            {

                throw new IllegalArgumentException("Unknown parameter" +
                                  (pset.size() > 1 ? "s " : " ") +  Arrays.toString(pset.toArray()));
            }

            // Setup the data.
<<FOREACHPARAM>>
<<ARRAY>>

            if (params.containsKey("*L*${langname}"))
            {
                if (params.get("*L*${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else {
                    ArrayList<${class_prefix}*U*${type}> iiarrtmp = (ArrayList<${class_prefix}*U*${type}>)params.get("*L*${langname}");
                    int count = 1;
                    for(${class_prefix}*U*${type} userClass : iiarrtmp)
                    {
                        userClass.setAttributes(byref, "${name}[" + count++ + "]");
                    }
                }
            }
<<ARRAY>>
<<CLASS>>

            if (params.containsKey("*L*${langname}"))
            {
                if (params.get("*L*${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else {
                    ${class_prefix}*U*${type} iiobtmp = (${class_prefix}*U*${type}) params.get("*L*${langname}");
                    iiobtmp.setAttributes(byref, "${name}");
                }
            }
<<CLASS>>
<<SCALAR>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>

            if (params.containsKey("*L*${langname}"))
            {
                if (params.get("*L*${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else {
                    byref.set${accesstype}("${name}", (${type})params.get("*L*${langname}"));
                }
            }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

            if (params.containsKey("*L*${langname}"))
            {
                if (params.get("*L*${langname}") == null)
                {
                    byref.setNull("${name}");
                }
                else
                {
                    if ((Date)params.get("*L*${langname}") == OpenROADDate.getBlankDate())
                    {
                        byref.setBlankDate("${name}");
                    }
                    else
                    {
                        if (OpenROADDateTime.class.isInstance(params.get("*L*${langname}"))
                        {
                            byref.setDate("${name}", (Date)params.get("*L*${langname}"));
                        }
                        else
                        {
                            byref.setDateWithoutTime("${name}", (Date)params.get("*L*${langname}"));
                        }
                    }
                }
            }
<<ONLYIF>><<DATETIME>>
<<SCALAR>>
<<FOREACHPARAM>>
          this.aso.callProc("${scp_name}", null, byref);
<<FOREACHPARAM>>
<<ARRAY>>

            if (params.containsKey("*L*${langname}"))
            {
                params.remove("*L*${langname}");

                if (byref.isNull("${name}") == false)
                {
                    ArrayList<${class_prefix}*U*${type}> *L*${langname} = new ArrayList<${class_prefix}*U*${type}>();

                    for(int i=1; i<=byref.lastRow("${name}"); i++)
                    {
                        ${class_prefix}*U*${type} iiobtmp = new ${class_prefix}*U*${type}(this.aso);
                        iiobtmp.populateAttributes(byref, "${name}[" + i + "]");
                        *L*${langname}.add(iiobtmp);
                    }
                    params.put("*L*${langname}", *L*${langname});
                }
                else
                {
                    params.put("*L*${langname}", null);
                }
            }
<<ARRAY>>
<<CLASS>>

            if (params.containsKey("*L*${langname}"))
            {
                params.remove("*L*${langname}");

                if (byref.isNull("${name}") == false)
                {
                  ${class_prefix}*U*${type} ${name} = new ${class_prefix}*U*${type}(this.aso);
                  ${name}.populateAttributes(byref, "${name}");
                  params.put("*L*${langname}", ${name});
                }
                else
                {
                    params.put("*L*${langname}", null);
                }
            }
<<CLASS>>
<<SCALAR>>
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>

            if (params.containsKey("*L*${langname}"))
            {
                params.remove("*L*${langname}");

                if (byref.isNull("${name}") == false)
                {
                    params.put("*L*${langname}", byref.get${accesstype}("${name}"));
                }
                else
                {
                    params.put("*L*${langname}",null);
                }
            }
<<ONLYIF>><<BYTEARRAY>><<STRING>><<FLOAT>><<BYTE>><<DOUBLE>><<SHORT>><<DECIMAL>><<INT>><<MONEY>>
<<ONLYIF>><<DATETIME>>

            if (params.containsKey("*L*${langname}"))
            {
                if (byref.isNull("${name}") == false)
                {
                    if (byref.isBlankDate("${name}") == false)
                    {
                        if (byref.isDateWithoutTime("${name}"))
                        {
                            params.put("*L*${langname}",new OpenRoadDate(byref.getDate("${name}")));
                        }
                        else
                        {
                            params.put("*L*${langname}",new OpenRoadDateTime(byref.getDate("${name}")));
                        }
                    }
                    else
                    {
                        params.put("*L*${langname}", OpenRoadDate.BLANK_DATE);
                    }
                }
                else
                {
                    params.put("${langname",null);
                }
            }
<<ONLYIF>><<DATETIME>>
<<SCALAR>>
<<FOREACHPARAM>>

            switch(this.aso.getOscaErrorType())
            {
                case OSCAError.FATAL_ERROR_TYPE:
                    throw new FatalOSCAException(this.aso.getOscaErrorNo(),
                        this.aso.getOscaMsgTxt());
                case OSCAError.USER_ERROR_TYPE:
                    throw new UserOSCAException(this.aso.getOscaErrorNo(),
                        this.aso.getOscaMsgTxt());
                case OSCAError.INFO_ERROR_TYPE:
                    /*
                     * This is an info error so only needs to be logged.
                     * You should replace this with your own logging code like log4j.
                     */
                    System.out.println("OSCAError[INFO ONLY]: " +
                        this.aso.getOscaMsgTxt());
                    break;
            }
        }
        finally {
            if (byref != null)
            {
                byref.release();
            }
        }
    }
<<FOREACHSCP>>
}
